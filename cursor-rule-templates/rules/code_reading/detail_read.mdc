---
description: 
globs: 
alwaysApply: false
---
この[クラス/モジュール/一連の処理]について、設計思想や背景を考察・解説してください。
- このような設計/実装になっている背景や理由はありますか？ (例: ビジネス要件、パフォーマンス考慮、技術的制約など)
- この実装のメリットとデメリット（トレードオフ）は何だと思いますか？
- 他に考えられる実装方法はありましたか？もしあれば、それと比較して現在の実装が選ばれた理由を推測してください。
- このコードが依存している外部ライブラリやモジュールがあれば、その依存関係の理由を説明してください。
- このコードを改善するとしたら、どのような点が考えられますか？（可読性、パフォーマンス、保守性などの観点から）
- このコードに関連する可能性のあるエラーやエッジケース、それらへの対応について教えてください。
- [もしあれば] このコードの歴史的経緯や、過去の大きな変更点について何か知見はありますか？

### 💡 Cursor Prompt : DETAIL_CODE_READING
# コードの詳細な理解と分析のためのガイドライン

## 基本情報
- ファイル名：[ファイル名]
- 主要な機能/クラス：[機能名/クラス名]
- 依存関係：[主要な依存モジュール/ライブラリ]

## コードの詳細分析
1. アーキテクチャ/設計パターン
   - 使用されているデザインパターン
   - コンポーネント間の関係性
   - 責務の分離状況

2. データフロー
   - 入力データの処理フロー
   - 状態管理の方法
   - エラーハンドリングの仕組み

3. パフォーマンス考慮点
   - 計算量（時間/空間複雑度）
   - リソース使用状況
   - 最適化ポイント

4. セキュリティ観点
   - 入力値の検証
   - 認証/認可の処理
   - データの安全な取り扱い

## 改善提案
- パフォーマンス改善の可能性
- コードの可読性向上
- テスト容易性の向上
- セキュリティ強化ポイント
